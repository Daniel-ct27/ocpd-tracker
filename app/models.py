from datetime import datetime

from sqlalchemy import Integer, String, ForeignKey,DateTime, func
from sqlalchemy.orm import Mapped, mapped_column, relationship
from flask_login import UserMixin
from . import db

"""1) Can user be implemented using the users stored  school id guaranteed all user_ids are different
   2) Every Event needs a venue and a time, should be a datetime object to allow me rank
   3) Every Assignment needs a deadline to be submitted, should be a datetime object
   4) Every assignment completed or task_completed should come with a time stamp
   5) Add a role attribute to distinguish between types of  users to make identifying admin roles
   6) Add is_active attributes to events, users, instead of deleting permanently.


"""
class Program(db.Model):
    """The overarching database each with its own users, each entry represents a program in the OCPD office"""
    __tablename__ = "programs"
    id:Mapped[str] = mapped_column(Integer,primary_key=True)
    name:Mapped[str] =mapped_column(String(100),nullable=False,unique=True)
     #Creating relationship between the models, every program has its own users, events, and assignments
    users = relationship("User",back_populates="program")
    events = relationship("Event",back_populates="program")
    assignments = relationship("Assignment",back_populates="program")
    admin = relationship("ProgramAdmin", back_populates="program")


class User(db.Model,UserMixin):
    __tablename__ = "users"
    """
    The users table every user in the database in added to this table, they all have fields that identify what program they belong to
    The also have a value called is_admin that gives them different functionality
    """
    school_id:Mapped[str] = mapped_column(String(100),primary_key=True)
    name: Mapped[str] = mapped_column(String(250),nullable=False)
    email:Mapped[str] = mapped_column(String(250),nullable=False)
    password_hash:Mapped[str] = mapped_column(String(250),nullable=False)
    role: Mapped[str]  = mapped_column(String(100),nullable=True)
    #Needs a foreign key to show what program it belongs to - program_id
    program_id = mapped_column(Integer,db.ForeignKey("programs.id"))
    #Creating a relationship between the users and their program so we can access a programs users and a users program
    program = relationship("Program",back_populates="users")

    #relationships between users and events and users and assignments and also admin table
    attendance = relationship("Attendance",back_populates="user")
    assignment_completed = relationship("AssignmentCompletion",back_populates="user")
    admin = relationship("ProgramAdmin", back_populates="user")

class Event(db.Model):
    """
    An event or meeting scholars are to attend, i
    """
    #should have a time in datetime
    __tablename__ = "events"
    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    title: Mapped[str] = mapped_column(String(250),nullable=False)
    description: Mapped[str] = mapped_column(String(250))
    location: Mapped[str] = mapped_column(String(250),nullable=True)
    code:Mapped[str] = mapped_column(String(250),nullable=False)
    date: Mapped[datetime] = mapped_column(DateTime(timezone=True),nullable=False,server_default= func.now())
    #secret code to be generated by admins for each meeting students must enter it to sign in.
    #Needs a foreign key to show what program it belongs to - program_id
    program_id = mapped_column(Integer, db.ForeignKey("programs.id"))
    program = relationship("Program", back_populates="events")

    #relationships between events and attendance
    attendance = relationship("Attendance", back_populates="event")


class Assignment(db.Model):
    #should have a deadline in datetime
    __tablename__ = "assignments"
    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    title:Mapped[str] = mapped_column(String(250),nullable=False)
    description:Mapped[str] = mapped_column(String(250),nullable=True)
    deadline: Mapped[datetime] = mapped_column(DateTime(timezone=True), nullable=False, server_default=func.now())

    #Needs a foreign key to show what program it belongs to - program_id
    program_id = mapped_column(Integer, db.ForeignKey("programs.id"))
    program = relationship("Program", back_populates="assignments")

    #relationship between assignment and assignment completed to show who completed a specific task
    assignment_completed = relationship("AssignmentCompletion", back_populates="assignment")

class ProgramAdmin(db.Model):
    """A new model that acts as a linking table between Users and Programs. It should contain fields user_id and program_id. \
    The first a foreign key to the user table the second a foreign key to the program table. Each record here shows the user is an admin for a specified  program"""
    program_id = mapped_column(Integer, ForeignKey("programs.id"),primary_key=True)
    user_id = mapped_column(String(100), ForeignKey("users.id"),primary_key=True)

    program = relationship("Program", back_populates="admin")
    user = relationship("User", back_populates="admin")


class Attendance(db.Model):
    """
    A linking table between each event and users and tracks which student attended each one
    """
    #Creating composite keys for the many to many relationship
    event_id = mapped_column(Integer,ForeignKey("events.id"),primary_key=True)
    user_id = mapped_column(String(100), ForeignKey("users.id"), primary_key=True)

    #creating relationships
    event = relationship("Event",back_populates="attendance")
    user = relationship("User",back_populates="attendance")

    timestamp: Mapped[datetime] = mapped_column(DateTime(timezone=True), nullable=False, server_default=func.now())

class AssignmentCompletion(db.Model):
    """
     A linking table between each prtask and users and tracks which student submitted each one
     """

    assignment_id = mapped_column(Integer, ForeignKey("assignments.id"), primary_key=True)
    user_id = mapped_column(String(100), ForeignKey("users.id"), primary_key=True)

    # creating relationships
    assignment = relationship("Assignment", back_populates="assignment_completed")
    user = relationship("User", back_populates="assignment_completed")
    timestamp: Mapped[datetime] = mapped_column(DateTime(timezone=True), nullable=False, server_default=func.now())

program_model = {"FELP":1,"CFA":2,"RISE":3,"TRUIST":4}